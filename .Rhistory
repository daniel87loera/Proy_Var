ww <- ("C:/Users/V Tibs/Desktop/datos/pulsar_stars.csv")
dataset <- read.csv(ww , header = TRUE)
colnames(dataset)[9] <- "TipoEstrella"
dataset$TipoEstrella <- factor(dataset$TipoEstrella, levels = c("0", "1"), labels = c("NoPulsar", "Pulsar"))
dataset[, c(1:8)] <- scale(dataset[, c(1:8)])
summary(dataset)
library(caTools)
set.seed(1234)
split <- sample.split(dataset$TipoEstrella, SplitRatio = 0.80)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
library(caret)
folds <- createFolds(training_set$TipoEstrella, k = 10)
# Naive Bayes
cvNaiveBayes <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <- naiveBayes(TipoEstrella ~ ., data = training_fold)
y_pred <- predict(clasificador, newdata = test_fold)
cm <- table(test_fold$TipoEstrella, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionNaiveBayes <- mean(as.numeric(cvNaiveBayes))
library(e1071)
library(C50)
library(rpart)
ww <- ("C:/Users/V Tibs/Desktop/datos/pulsar_stars.csv")
dataset <- read.csv(ww , header = TRUE)
colnames(dataset)[9] <- "TipoEstrella"
dataset$TipoEstrella <- factor(dataset$TipoEstrella, levels = c("0", "1"), labels = c("NoPulsar", "Pulsar"))
dataset[, c(1:8)] <- scale(dataset[, c(1:8)])
summary(dataset)
library(caTools)
set.seed(1234)
split <- sample.split(dataset$TipoEstrella, SplitRatio = 0.80)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
library(caret)
folds <- createFolds(training_set$TipoEstrella, k = 10)
# Naive Bayes
cvNaiveBayes <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <- naiveBayes(TipoEstrella ~ ., data = training_fold)
y_pred <- predict(clasificador, newdata = test_fold)
cm <- table(test_fold$TipoEstrella, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionNaiveBayes <- mean(as.numeric(cvNaiveBayes))
View(cvNaiveBayes)
View(cvNaiveBayes)
View(test_set)
ww <- ("C:/Users/V Tibs/Desktop/datos/Datos del Prestamo/Prestamo_Indiv.csv")
dataset <- read.csv(ww , header = TRUE)
ww <- ("C:/Users/V Tibs/Desktop/datos/Datos del Prestamo/Prestamo_Indiv.csv")
dataset <- read.csv(ww , header = TRUE)
ww <- ("C:/Users/V Tibs/Desktop/datos/Datos del Prestamo/Prestamo_Indiv.csv")
dataset <- read.csv(ww , header = TRUE)
library(e1071)
library(C50)
library(rpart)
ww <- ("C:/Users/V Tibs/Desktop/datos/Datos del Prestamo/Prestamo_Indiv.csv")
dataset <- read.csv(ww , header = TRUE)
colnames(dataset)[16] <- "Status_Prestamo"
dataset$Status_Prestamo <- factor(dataset$Status_Prestamo, levels = c("0", "1"), labels = c("NoPulsar", "Pulsar"))
dataset[, c(1:15)] <- scale(dataset[, c(1:15)])
summary(dataset)
library(caTools)
set.seed(1234)
split <- sample.split(dataset$Status_Prestamo, SplitRatio = 0.70)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
library(caret)
folds <- createFolds(training_set$Status_Prestamo, k = 10)
# Naive Bayes
cvNaiveBayes <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <- naiveBayes(Status_Prestamo ~ ., data = training_fold)
y_pred <- predict(clasificador, newdata = test_fold)
cm <- table(test_fold$Status_Prestamo, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionNaiveBayes <- mean(as.numeric(cvNaiveBayes))
ww <- ("C:/Users/V Tibs/Desktop/datos/Datos del Prestamo/Prestamo_Indiv.csv")
dataset <- read.csv(ww , header = TRUE)
colnames(dataset)[16] <- "Status_Prestamo"
dataset$Status_Prestamo <- factor(dataset$Status_Prestamo, levels = c("0", "1"), labels = c("NoPulsar", "Pulsar"))
dataset[, c(1:15)] <- scale(dataset[, c(1:15)])
summary(dataset)
ww <- ("C:/Users/V Tibs/Desktop/datos/Datos del Prestamo/Prestamo_Indiv.csv")
dataset <- read.csv(ww , header = TRUE)
#colnames(dataset)[16] <- "Status_Prestamo"
dataset$Status_Prestamo <- factor(dataset$Status_Prestamo, levels = c("0", "1"), labels = c("NoPulsar", "Pulsar"))
dataset[, c(1:15)] <- scale(dataset[, c(1:15)])
summary(dataset)
ww <- ("C:/Users/V Tibs/Desktop/datos/Datos del Prestamo/Prestamo_Indiv.csv")
dataset <- read.csv(ww , header = TRUE)
#colnames(dataset)[16] <- "Status_Prestamo"
dataset$Status_Prestamo <- factor(dataset$Status_Prestamo)
dataset[, c(1:15)] <- scale(dataset[, c(1:15)])
summary(dataset)
library(C50)
library(caTools)
set.seed(1234)
split <- sample.split(dataset$Status_Prestamo, SplitRatio = 0.70)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
library(caret)
folds <- createFolds(training_set$Status_Prestamo, k = 10)
# Naive Bayes
cvNaiveBayes <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <- naiveBayes(Status_Prestamo ~ ., data = training_fold)
y_pred <- predict(clasificador, newdata = test_fold)
cm <- table(test_fold$Status_Prestamo, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionNaiveBayes <- mean(as.numeric(cvNaiveBayes))
library(e1071)
library(C50)
library(rpart)
ww <- ("C:/Users/V Tibs/Desktop/datos/Datos del Prestamo/Prestamo_Indiv.csv")
dataset <- read.csv(ww , header = TRUE)
#colnames(dataset)[16] <- "Status_Prestamo"
dataset$Status_Prestamo <- factor(dataset$Status_Prestamo)
dataset[, c(1:15)] <- scale(dataset[, c(1:15)])
summary(dataset)
library(caTools)
set.seed(1234)
split <- sample.split(dataset$Status_Prestamo, SplitRatio = 0.80)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
library(caret)
folds <- createFolds(training_set$Status_Prestamo, k = 10)
# Naive Bayes
cvNaiveBayes <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <- naiveBayes(Status_Prestamo ~ ., data = training_fold)
y_pred <- predict(clasificador, newdata = test_fold)
cm <- table(test_fold$Status_Prestamo, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionNaiveBayes <- mean(as.numeric(cvNaiveBayes))
library(e1071)
library(C50)
library(rpart)
ww <- ("C:/Users/V Tibs/Desktop/datos/Datos del Prestamo/Prestamo_Indiv.csv")
dataset <- read.csv(ww , header = TRUE)
#colnames(dataset)[16] <- "Status_Prestamo"
dataset$Status_Prestamo <- factor(dataset$Status_Prestamo)
dataset[, c(1:15)] <- scale(dataset[, c(1:15)])
summary(dataset)
library(caTools)
set.seed(1234)
split <- sample.split(dataset$Status_Prestamo, SplitRatio = 0.80)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
library(caret)
folds <- createFolds(training_set$Status_Prestamo, k = 10)
# Naive Bayes
cvNaiveBayes <- lapply(folds, function(x){
training_fold <- training_set[-x, ]
test_fold <- training_set[x, ]
clasificador <- naiveBayes(Status_Prestamo ~ ., data = training_fold)
y_pred <- predict(clasificador, newdata = test_fold)
cm <- table(test_fold$Status_Prestamo, y_pred)
precision <- (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] +cm[1,2] + cm[2,1])
return(precision)
})
precisionNaiveBayes <- mean(as.numeric(cvNaiveBayes))
###################### LECTOR DE ARCHIVO ####################
ww <- ("C:/Users/V Tibs/Desktop/datos/Datos del Prestamo/Prestamo_Indiv.csv")
Prestamos<- read.csv(ww, header = TRUE)
#View(Prestamos)
#Prest <- as.factor(Prestamos)
############ ENTRENAMIENTO DE RED  Y TESTEO DE #############
##################TEOREMA DE BAYES #########################
library(e1071)
# SelecciÃ³n de una submuestra el 70% de los datos
set.seed(200)
ABA.indices <- sample(1:nrow(Prestamos), nrow(Prestamos)* 0.7)
ABA.entrenamiento <- Prestamos[ABA.indices,]
ABA.test <- Prestamos[-ABA.indices,]
model <- naiveBayes(Status_Prestamo ~ ., datac = ABA.entrenamiento)
####################### PREDICCION ###############################
results <- predict(object = model, newdata = ABA.test, type = "raw")
#results2 <- predict(object = model, ABA.test, type = "class")
#mc <- table(results,ABA.test$Status_Prestamo)
#mc
#Porcentaje <- round(results*100)
# Correctamente clasificados
#x <- 100 * sum(diag(mc)) / sum(mc)
#Agregar Columna de Prediccion a la tabla ABA.test
ABA.test$Pronostico <- Porcentaje
write.csv(ABA.test, "PrestamosP.csv")
